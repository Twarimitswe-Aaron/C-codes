#include <gtk/gtk.h>
#include "../../include/database.h"
#include "../../include/book.h"
#include "../../include/author.h"
#include "../../include/publisher.h"
#include "books_page.h"

// Global variables
static GtkWidget *books_page;
static GtkWidget *books_list;
static GtkWidget *search_entry;
static GtkListStore *books_store;
static GtkWidget *add_book_dialog;
static GtkWidget *edit_book_dialog;
static GtkWidget *main_window;
static Database *db;

// Function prototypes
static void refresh_books_list(Database *db);
static void edit_book_dialog_show(Database *db, int book_id);
static void delete_book_dialog_show(Database *db, int book_id);
static void search_books(Database *db, const char *query);
static void on_edit_book(GtkWidget *widget, gpointer data);
static gboolean on_delete_book(GtkWidget *widget, GdkEventKey *event, gpointer data);
static void on_add_book_clicked(GtkWidget *widget, gpointer data);
static void on_add_book_response(GtkDialog *dialog, gint response_id, gpointer data);
static void on_search_changed(GtkSearchEntry *entry, gpointer user_data);

// ... [Keep all the existing code until on_edit_book function] ...

static void on_edit_book(GtkWidget *widget, gpointer data) {
    (void)widget;
    Database *db = (Database *)data;
    GtkTreeSelection *selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(books_list));
    GtkTreeModel *model;
    GtkTreeIter iter;
    
    if (!gtk_tree_selection_get_selected(selection, &model, &iter)) {
        GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
            GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
            GTK_MESSAGE_ERROR,
            GTK_BUTTONS_OK,
            "Please select a book to edit");
        gtk_dialog_run(GTK_DIALOG(message_dialog));
        gtk_widget_destroy(message_dialog);
        return;
    }

    int book_id;
    gtk_tree_model_get(model, &iter, 0, &book_id, -1);
    
    Book *book = book_find_by_id(db, book_id);
    if (!book) {
        GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
            GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
            GTK_MESSAGE_ERROR,
            GTK_BUTTONS_OK,
            "Failed to find book with ID: %d", book_id);
        gtk_dialog_run(GTK_DIALOG(message_dialog));
        gtk_widget_destroy(message_dialog);
        return;
    }

    // Get author and publisher names
    Author *author = author_find_by_id(db, book->author_id);
    Publisher *publisher = publisher_find_by_id(db, book->publisher_id);
    
    GtkWidget *grid = NULL;
    GtkWidget *dialog = create_book_dialog("Edit Book", "Save", &grid);
    gtk_window_set_transient_for(GTK_WINDOW(dialog), GTK_WINDOW(main_window));
    gtk_window_set_modal(GTK_WINDOW(dialog), TRUE);
    
    // Get all entry widgets
    GtkWidget *title_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 0);
    GtkWidget *author_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 1);
    GtkWidget *publisher_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 2);
    GtkWidget *isbn_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 3);
    GtkWidget *genre_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 4);
    GtkWidget *year_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 5);
    GtkWidget *copies_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 6);
    GtkWidget *shelf_entry = gtk_grid_get_child_at(GTK_GRID(grid), 1, 7);

    // Set initial values
    gtk_entry_set_text(GTK_ENTRY(title_entry), book->title);
    gtk_entry_set_text(GTK_ENTRY(author_entry), author ? author->name : "");
    gtk_entry_set_text(GTK_ENTRY(publisher_entry), publisher ? publisher->name : "");
    gtk_entry_set_text(GTK_ENTRY(isbn_entry), book->isbn);
    gtk_entry_set_text(GTK_ENTRY(genre_entry), book->genre);
    gtk_entry_set_text(GTK_ENTRY(year_entry), g_strdup_printf("%d", book->year_published));
    gtk_entry_set_text(GTK_ENTRY(copies_entry), g_strdup_printf("%d", book->copies_available));
    gtk_entry_set_text(GTK_ENTRY(shelf_entry), book->shelf_location);

    // Show dialog and handle response
    gint response = gtk_dialog_run(GTK_DIALOG(dialog));
    
    if (response == GTK_RESPONSE_ACCEPT) {
        // Get updated values
        const gchar *title = gtk_entry_get_text(GTK_ENTRY(title_entry));
        const gchar *author_name = gtk_entry_get_text(GTK_ENTRY(author_entry));
        const gchar *publisher_name = gtk_entry_get_text(GTK_ENTRY(publisher_entry));
        const gchar *isbn = gtk_entry_get_text(GTK_ENTRY(isbn_entry));
        const gchar *genre = gtk_entry_get_text(GTK_ENTRY(genre_entry));
        const gchar *year = gtk_entry_get_text(GTK_ENTRY(year_entry));
        const gchar *copies = gtk_entry_get_text(GTK_ENTRY(copies_entry));
        const gchar *shelf = gtk_entry_get_text(GTK_ENTRY(shelf_entry));

        // Validate required fields
        if (!title || !author_name || !publisher_name || !isbn) {
            GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
                GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                GTK_MESSAGE_ERROR,
                GTK_BUTTONS_OK,
                "Please fill in all required fields (Title, Author, Publisher, ISBN)");
            gtk_dialog_run(GTK_DIALOG(message_dialog));
            gtk_widget_destroy(message_dialog);
            gtk_widget_destroy(dialog);
            book_free(book);
            if (author) author_free(author);
            if (publisher) publisher_free(publisher);
            return;
        }

        // Look up or create author
        Author *new_author = author_find_by_name(db, author_name);
        if (!new_author) {
            new_author = author_create(author_name, "No biography available");
            if (new_author) {
                author_save(db, new_author);
            }
        }

        // Look up or create publisher
        Publisher *new_publisher = publisher_find_by_name(db, publisher_name);
        if (!new_publisher) {
            new_publisher = publisher_create(publisher_name);
            if (new_publisher) {
                publisher_save(db, new_publisher);
            }
        }

        if (!new_author || !new_publisher) {
            GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
                GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                GTK_MESSAGE_ERROR,
                GTK_BUTTONS_OK,
                "Failed to create or find author/publisher");
            gtk_dialog_run(GTK_DIALOG(message_dialog));
            gtk_widget_destroy(message_dialog);
            gtk_widget_destroy(dialog);
            book_free(book);
            if (author) author_free(author);
            if (publisher) publisher_free(publisher);
            if (new_author) author_free(new_author);
            if (new_publisher) publisher_free(new_publisher);
            return;
        }

        // Update book details
        strncpy(book->title, title, sizeof(book->title) - 1);
        book->author_id = new_author->author_id;
        book->publisher_id = new_publisher->publisher_id;
        strncpy(book->isbn, isbn, sizeof(book->isbn) - 1);
        strncpy(book->genre, genre, sizeof(book->genre) - 1);
        book->year_published = atoi(year);
        book->copies_available = atoi(copies);
        strncpy(book->shelf_location, shelf, sizeof(book->shelf_location) - 1);

        // Save changes
        if (book_save(db, book) == 0) {
            GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
                GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                GTK_MESSAGE_INFO,
                GTK_BUTTONS_OK,
                "Book updated successfully: %s", title);
            gtk_dialog_run(GTK_DIALOG(message_dialog));
            gtk_widget_destroy(message_dialog);
        } else {
            GtkWidget *message_dialog = gtk_message_dialog_new(GTK_WINDOW(main_window),
                GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                GTK_MESSAGE_ERROR,
                GTK_BUTTONS_OK,
                "Failed to update book in database");
            gtk_dialog_run(GTK_DIALOG(message_dialog));
            gtk_widget_destroy(message_dialog);
        }

        // Clean up
        if (new_author) author_free(new_author);
        if (new_publisher) publisher_free(new_publisher);
    }

    // Clean up
    gtk_widget_destroy(dialog);
    book_free(book);
    if (author) author_free(author);
    if (publisher) publisher_free(publisher);
    
    // Refresh the list
    refresh_books_list(db);
}

// ... [Keep all the remaining code] ... 